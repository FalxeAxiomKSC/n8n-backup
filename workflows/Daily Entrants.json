{"createdAt":"2025-10-19T02:04:51.575Z","updatedAt":"2025-10-19T17:39:10.000Z","id":"126BMZCcmw0LobJ0","name":"Daily Entrants","active":true,"isArchived":false,"nodes":[{"parameters":{"operation":"formatDate","date":"={{ $json.newDate }}","format":"X","outputFieldName":"currentDateUnix","options":{}},"type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-4320,800],"id":"f6525f4d-475a-4dcc-89d8-5008f929c8d5","name":"Date & Time1"},{"parameters":{"options":{}},"type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-4864,880],"id":"958e353c-5e12-4415-8be1-8cd18bb0aefe","name":"Date & Time"},{"parameters":{"operation":"subtractFromDate","magnitude":"={{ $json.roundedDate }}","duration":1,"outputFieldName":"dayAgo","options":{}},"type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-4480,960],"id":"18a731c6-90dc-4332-8d97-596ff81225f7","name":"Date & Time2"},{"parameters":{"operation":"formatDate","date":"={{ $json.dayAgo }}","format":"X","outputFieldName":"dayAgoUnix","options":{}},"type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-4320,960],"id":"82725bea-e537-46d5-b54c-4597e85186fc","name":"Date & Time3"},{"parameters":{"mode":"combine","combineBy":"combineAll","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-4144,880],"id":"26869b6c-6642-4bdd-a392-a4dc6c2aa5d3","name":"Merge"},{"parameters":{"fieldToSplitOut":"data.data.tournaments.nodes","include":"selectedOtherFields","fieldsToInclude":"={{ $json.data.data.tournaments.nodes[0].name }} {{ $json.data.data.tournaments.nodes[0].events }}","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-3776,880],"id":"5841ca4a-1931-480b-b1c3-3b88f1d2d703","name":"Split Out"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b84a0c12-449a-4756-aeeb-017a0f934e38","leftValue":"={{ $json['data.data.tournaments.nodes'].events[0].numEntrants }}","rightValue":0,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-3136,768],"id":"d70168af-1467-4875-96ee-40a5c647cc6e","name":"Filter1"},{"parameters":{"fieldsToSummarize":{"values":[{"aggregation":"sum","field":"['data.data.tournaments.nodes'].events[0].numEntrants"},{"aggregation":"sum","field":"['data.data.tournaments.nodes'].events[1].numEntrants"}]},"options":{}},"type":"n8n-nodes-base.summarize","typeVersion":1.1,"position":[-2720,640],"id":"bfc60379-b6a7-49ae-a3a0-44bd5b046a8d","name":"Summarize"},{"parameters":{"maxItems":5},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[-2480,912],"id":"a6fa3065-3f38-4593-a3cc-205890685718","name":"Limit"},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[160,0],"id":"3748a57e-508a-476a-85b2-23dae8d06f2b","name":"Aggregate"},{"parameters":{"mode":"combine","combineBy":"combineAll","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[0,0],"id":"9b20c5e0-b6f4-414a-9fef-11a6cbc3fd25","name":"Merge1"},{"parameters":{"rule":{"interval":[{"triggerAtHour":17,"triggerAtMinute":21}]}},"id":"ece8642d-214c-4d3f-a942-49bdf4044e74","name":"Run Daily @ 4:21pm","type":"n8n-nodes-base.scheduleTrigger","position":[-5024,880],"typeVersion":1.2},{"parameters":{"authentication":"headerAuth","endpoint":"https://api.start.gg/gql/alpha","query":"=query Tournaments($gameId: [ID]!, $startDate: Timestamp!, $endDate: Timestamp!, $eventType: [Int]!) { tournaments(query: { perPage: 500, filter: { videogameIds: $gameId, afterDate: $startDate, beforeDate: $endDate } }) { nodes { name addrState countryCode events(filter: { videogameId: $gameId, type: $eventType })  { id tournament { name } name slug numEntrants } } } }","variables":"={ \"gameId\": [53945], \"startDate\": {{ $json.dayAgoUnix }}, \"endDate\": {{ $json.currentDateUnix }}, \"eventType\": [1]  }","responseFormat":"string","headerParametersUi":{"parameter":[{"name":"Authorization","value":"={{$env.STARTGG_TOKEN}}"}]}},"type":"n8n-nodes-base.graphql","typeVersion":1.1,"position":[-3968,880],"id":"cd3a9c32-7251-44c8-acfa-b0eada88c1ce","name":"GraphQL Events","credentials":{"httpHeaderAuth":{"id":"OHPOzv5xBBYipCbV","name":"Header Auth account"}}},{"parameters":{"authentication":"headerAuth","endpoint":"https://api.start.gg/gql/alpha","query":"=query Event($eventId: ID!) { event(id: $eventId) { id phases { id } phaseGroups { id phase { phaseOrder id name } } tournament { name } } }","variables":"={ \"eventId\": {{ $json['[\\'data.data.tournaments.nodes\\'].events'].id }}}","responseFormat":"string","headerParametersUi":{"parameter":[{"name":"Authorization","value":"{{$env.STARTGG_TOKEN}}"}]}},"type":"n8n-nodes-base.graphql","typeVersion":1.1,"position":[-2320,912],"id":"0fbf2f96-7a26-4f31-a030-6669e43b90b8","name":"GraphQL Phases","credentials":{"httpHeaderAuth":{"id":"OHPOzv5xBBYipCbV","name":"Header Auth account"}}},{"parameters":{"fieldToSplitOut":"data.data.event.phaseGroups","include":"selectedOtherFields","fieldsToInclude":"data.data.event.tournament.name, data.data.event.id","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-2160,912],"id":"943ac42a-cfd3-4f6a-997f-0e348c55adb2","name":"Split Out1"},{"parameters":{"sortFieldsUi":{"sortField":[{"fieldName":"=['data.data.event.phaseGroups'].phase.phaseOrder","order":"descending"}]},"options":{}},"type":"n8n-nodes-base.sort","typeVersion":1,"position":[-1984,912],"id":"50aba3b3-40cd-425d-a8bf-a23b405c9f71","name":"Sort1"},{"parameters":{"fieldToSplitOut":"data.data.phase.sets.nodes[0].games","include":"selectedOtherFields","fieldsToInclude":"data.data.phase.sets.nodes[0].displayScore, data.data.phase.sets.nodes[0].games[0].selections[0].character.name, data.data.phase.sets.nodes[0].games[0].selections[1].character.name, data.data.phase.sets.nodes[0].id, data.data.phase.sets.nodes[0].winnerId, data.data.phase.event.id, data.data.phase.event.tournament.name","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-2320,1104],"id":"208a598b-ae2e-420d-b6e7-37208a26c323","name":"Split Out2"},{"parameters":{"sortFieldsUi":{"sortField":[{"fieldName":"['data.data.phase.sets.nodes[0].games'].orderNum","order":"descending"}]},"options":{}},"type":"n8n-nodes-base.sort","typeVersion":1,"position":[-2160,1104],"id":"badf449e-dc02-4674-ae9d-cc8594e92988","name":"Sort2"},{"parameters":{"authentication":"headerAuth","endpoint":"https://api.start.gg/gql/alpha","query":"=query PhaseInfo($phaseId: ID!) { phase(id: $phaseId) { id name phaseOrder phaseGroups { nodes { id bracketType } } sets { nodes { id displayScore identifier round games { orderNum } winnerId } } event { id tournament { name } } } }","variables":"={ \"phaseId\": {{ $json['data.data.event.phaseGroups'].phase.id }} }","responseFormat":"string","headerParametersUi":{"parameter":[{"name":"Authorization","value":"{{$env.STARTGG_TOKEN}}"}]}},"type":"n8n-nodes-base.graphql","typeVersion":1.1,"position":[-2480,1104],"id":"b1502b69-9cea-4563-a9db-66e10d0c8097","name":"GraphQL Phases1","credentials":{"httpHeaderAuth":{"id":"OHPOzv5xBBYipCbV","name":"Header Auth account"}}},{"parameters":{"authentication":"headerAuth","endpoint":"https://api.start.gg/gql/alpha","query":"=query GetEntrant($entrantId: ID!) { entrant(id: $entrantId) { id name } }","variables":"={{ $json[\"data.data.phase.sets.nodes[0].winnerId\"] !== null ? JSON.stringify({ \"entrantId\": $json[\"data.data.phase.sets.nodes[0].winnerId\"] }) : \"{}\" }}\n","responseFormat":"string","headerParametersUi":{"parameter":[{"name":"Authorization","value":"{{$env.STARTGG_TOKEN}}"}]}},"type":"n8n-nodes-base.graphql","typeVersion":1.1,"position":[-1584,1200],"id":"2e616f07-ccb8-49c0-9628-d044a9638ed7","name":"GraphQL Phases2","alwaysOutputData":true,"credentials":{"httpHeaderAuth":{"id":"OHPOzv5xBBYipCbV","name":"Header Auth account"}}},{"parameters":{"assignments":{"assignments":[{"id":"08f7949b-ccdd-4ce2-90be-247b219e0644","name":"['data.data.phase.sets.nodes[0].winnerId']","value":"={{ $json.data.data.entrant.id }}","type":"number"},{"id":"77c4edc8-74bf-455d-a44c-dd2bc177f0c3","name":"winnerName","value":"={{ $json.data.data.entrant.name }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1408,1200],"id":"996ebed8-a1e2-489a-9050-ebf11daa6555","name":"Edit Fields"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"5a76826e-fe59-4295-950f-d2a947a7d07f","leftValue":"={{ $json['data.data.phase.sets.nodes[0].winnerId'] }}","rightValue":"","operator":{"type":"number","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-1776,1200],"id":"d60b9ee9-e601-4d30-9269-22600b948844","name":"Filter"},{"parameters":{"mode":"combine","advanced":true,"mergeByFields":{"values":[{"field1":"['[\\'data.data.tournaments.nodes\\'].events'].id","field2":"data.data.phase.event.id"}]},"options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-1600,624],"id":"4c2b90bc-7eb4-40c4-9169-4bee1d5fe562","name":"Merge Events"},{"parameters":{"mode":"combine","fieldsToMatchString":"['data.data.phase.sets.nodes[0].winnerId']","joinMode":"keepEverything","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-608,288],"id":"35968e85-f153-4d88-86cd-70670e252ab1","name":"Merge Events and Winners"},{"parameters":{"mode":"combine","fieldsToMatchString":"['data.data.phase.sets.nodes[0].winnerId']","joinMode":"keepEverything","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-736,544],"id":"c3462709-d985-43e7-9c8d-eb51861e9daa","name":"Merge Winners"},{"parameters":{"jsCode":"// Get input data\nconst items = $input.all();\n\n// Initialize storage for unique set IDs\nconst seenSetIds = new Set();\nconst result = [];\n\n// Iterate through sorted data\nfor (const item of items) {\n    const setId = item.json[\"data.data.phase.sets.nodes[0].id\"];\n    \n    if (!seenSetIds.has(setId)) {\n        seenSetIds.add(setId);\n        result.push(item);\n    }\n}\n\n// Return filtered results\nreturn result;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1984,1104],"id":"479e98e9-440e-4220-a549-0131844536ef","name":"Code Top5 Events"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b589aefc-bb1b-4b40-93d8-3080d320f853","leftValue":"={{ $json.characterCount }}","rightValue":301,"operator":{"type":"number","operation":"lt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[64,320],"id":"873fcfd7-674c-4eae-82a0-82b103ff7c93","name":"If 280 > x > 300"},{"parameters":{"jsCode":"// Define max tournament name length\nconst maxLength = 40;\n\n// Define key phrases to be hashtagged, replacing spaces with no-space formatting\nconst hashtagKeywords = {\n    \"Rivals2\": \"#Rivals2\",\n    \"Rivals of Aether\": \"#RivalsOfAether\",\n    \"Melee\": \"#Melee\",\n    \"Rivals\": \"#Rivals\",\n    \"Smash\": \"#Smash\",\n    \"Ultimate\": \"#Ultimate\",\n    \"Aether\": \"#Aether\"\n};\n\n// Function to replace keywords with their hashtag versions\nconst addHashtags = (name) => {\n    let updatedName = name;\n    Object.keys(hashtagKeywords).forEach((word) => {\n        const regex = new RegExp(`\\\\b${word}\\\\b`, \"gi\");\n        updatedName = updatedName.replace(regex, hashtagKeywords[word]);\n    });\n    return updatedName;\n};\n\n// Function to truncate names while keeping key details\nconst truncateName = (name) => {\n    let truncatedName = addHashtags(name);\n    \n    if (truncatedName.length <= maxLength) {\n        return truncatedName;\n    }\n    \n    const splitCharacters = [\"-\", \"@\", \"#\", \":\", \"|\"];\n    let segments = [truncatedName];\n    \n    splitCharacters.forEach((char) => {\n        if (truncatedName.includes(char)) {\n            segments = truncatedName.split(char).map(segment => segment.trim());\n        }\n    });\n    \n    let cleanedName = segments[0];\n    for (let i = 1; i < segments.length; i++) {\n        const segment = segments[i];\n        if (Object.keys(hashtagKeywords).some(key => segment.includes(key))) {\n            cleanedName += `, ${segment}`;\n        }\n    }\n    \n    if (cleanedName.length > maxLength) {\n        cleanedName = cleanedName.substring(0, maxLength).trim();\n        if (cleanedName.includes(\" \")) {\n            cleanedName = cleanedName.substring(0, cleanedName.lastIndexOf(\" \"));\n        }\n        cleanedName += \"...\";\n    }\n    \n    return cleanedName;\n};\n\n// Define mapping of character names to icons\nconst characterIcons = {\n    \"Forsburn\": \"☠️\",\n    \"Loxodont\": \"🐘\",\n    \"Clairen\": \"🤺\",\n    \"Zetterburn\": \"🦁\",\n    \"Wrastor\": \"🦅\",\n    \"Fleet\": \"🦊\",\n    \"Maypul\": \"🌱\",\n    \"Kragg\": \"🪲\",\n    \"Ranno\": \"🐸\",\n    \"Orcane\": \"🐋\",\n    \"Etalus\": \"🐻‍\",\n    \"Olympia\": \"💎\"\n};\n\n// Retrieve total entrants\nconst totalEntrants = $input.first().json.data[0].$json['sum_\\'data_data_tournaments_nodes\\'_events0_numEntrants'] || 0;\n\n// Retrieve and process tournament data\nconst tournamentData = Array.from({ length: 5 }, (_, i) => {\n    const tournamentNode = $input.first()?.json?.data?.[i]?.[\"data.data.tournaments.nodes\"] || {};\n    const eventNode = $input.first()?.json?.data?.[i]?.[\"data.data.set.event\"] || {};\n    const winnerName = $input.first()?.json?.data?.[i]?.winnerName || \"\";\n\n    // Get the tournament name\n    const baseName = eventNode.tournament?.name || tournamentNode.name || \"N/A\";\n\n    // Get location from tournament data\n    const location = tournamentNode.countryCode && tournamentNode.countryCode !== \"US\" \n        ? tournamentNode.countryCode \n        : tournamentNode.addrState || \"\";\n\n    // Append location if available\n    const nameWithLocation = location ? `${baseName} (${location})` : baseName;\n\n    // Find correct entrant count using the provided reference\n    const entrants = $input.first()?.json?.data?.[i]?.[\"['data.data.tournaments.nodes'].events\"]?.numEntrants || 0;\n\n    // Retrieve character selection from first game (if available)\n    const selections = $input.first()?.json?.data?.[i]?.[\"data.data.set.games[0].selections\"] || [];\n    let characterName = \"\";\n\n    if (Array.isArray(selections)) {\n        characterName = selections.find(selection => selection?.character?.name)?.character?.name || \"\";\n    } else if (selections.character) {\n        characterName = selections.character.name;\n    }\n\n    // Get icon for character or default \"W:\"\n    const icon = characterIcons[characterName] || \"W:\";\n\n    return {\n        originalName: nameWithLocation,\n        truncatedName: truncateName(nameWithLocation),\n        entrants,\n        winner: winnerName ? `   ${icon} ${winnerName}` : \"\"\n    };\n});\n\n// Ensure there are at least 5 tournament entries\nwhile (tournamentData.length < 5) {\n    tournamentData.push({ originalName: \"N/A\", truncatedName: \"N/A\", entrants: 0, winner: \"\" });\n}\n\n// Construct tournament list\nlet tournamentList = \"\\n\\n\";\ntournamentData.forEach((tournament) => {\n    tournamentList += `${tournament.truncatedName} - ${tournament.entrants} entrants\\n${tournament.winner}\\n`;\n});\n\n// Construct final message\nconst inputString = \"Yesterday in #Rivals2!\";\nconst finalString = `${inputString}${tournamentList}\\nEntrants yesterday: ${totalEntrants}`.trim();\n\n// Return result\nreturn [{ \n    result: finalString, \n    characterCount: finalString.length \n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[320,0],"id":"21b461df-67a5-4877-89ec-c29699abb5fb","name":"Assemble Post"},{"parameters":{"authentication":"headerAuth","endpoint":"https://api.start.gg/gql/alpha","query":"=query SetInfo($setId: ID!) {\n    set(id: $setId) {\n        id\n        winnerId\n        games {\n            selections {\n                character {\n                    name\n                }\n                entrant {\n                    name\n                    id\n                }\n            }\n        }\n        displayScore\n        event {\n            tournament {\n                name\n            }\n            id\n        }\n    }\n}","variables":"={{ $json[\"data.data.phase.sets.nodes[0].id\"] !== null ? JSON.stringify({ \"setId\": $json[\"data.data.phase.sets.nodes[0].id\"] }) : \"{}\" }}","responseFormat":"string","headerParametersUi":{"parameter":[{"name":"Authorization","value":"{{$env.STARTGG_TOKEN}}"}]}},"type":"n8n-nodes-base.graphql","typeVersion":1.1,"position":[-1584,1408],"id":"898f29f7-f292-425b-9b2e-29cd18f619a9","name":"GraphQL Phases3","alwaysOutputData":true,"credentials":{"httpHeaderAuth":{"id":"OHPOzv5xBBYipCbV","name":"Header Auth account"}}},{"parameters":{"mode":"combine","advanced":true,"mergeByFields":{"values":[{"field1":"['data.data.phase.sets.nodes[0].winnerId']","field2":"data.data.set.winnerId"}]},"joinMode":"enrichInput1","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-928,1200],"id":"6b70b1e7-1b1b-423e-8480-b97df011a348","name":"Merge Winners1"},{"parameters":{"fieldToSplitOut":"data.data.set.games[0].selections, data.data.set.games[1].selections, data.data.set.games[2].selections, data.data.set.games[].selections, data.data.set.games[].selections, ","include":"selectedOtherFields","fieldsToInclude":"data.data.set.event.tournament.name, data.data.set.event.id, data.data.set.winnerId, data.data.set.winnerId","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-1408,1408],"id":"e2e3bd74-c726-4f11-9ee8-421065061e11","name":"Split Out3"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"9352ecff-ac16-48dd-a6ff-435f91bbd70b","leftValue":"={{ $json['data.data.set.games[0].selections'].entrant.id }}","rightValue":"={{ $json['data.data.set.winnerId'] }}","operator":{"type":"number","operation":"equals"}},{"id":"17376203-2890-48f3-b6ec-8adc039f279e","leftValue":"={{ $json['data.data.set.games[1].selections'].entrant.id }}","rightValue":"={{ $json['data.data.set.winnerId'] }}","operator":{"type":"number","operation":"equals"}},{"id":"1da72bbd-51af-4303-9bde-53ef65d6c4ad","leftValue":"={{ $json['data.data.set.games[2].selections'].entrant.id }}","rightValue":"={{ $json['data.data.set.winnerId'] }}","operator":{"type":"number","operation":"equals"}},{"id":"cd2416a1-1864-4707-9060-5ed7d683a584","leftValue":"={{ $json['data.data.set.games[3].selections'].entrant.id }}","rightValue":"={{ $json['data.data.set.winnerId'] }}","operator":{"type":"number","operation":"equals"}},{"id":"cc59f5cf-2e5c-4502-b2d0-1d691e2b1271","leftValue":"={{ $json['data.data.set.games[4].selections'].entrant.id }}","rightValue":"={{ $json['data.data.set.winnerId'] }}","operator":{"type":"number","operation":"equals"}}],"combinator":"or"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-1216,1408],"id":"de4d7601-ac81-49db-b366-9a36f0505e80","name":"Filter2"},{"parameters":{"fieldToSplitOut":"['data.data.tournaments.nodes'].events","include":"selectedOtherFields","fieldsToInclude":"={{ $json['data.data.tournaments.nodes'].name }}","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-3584,880],"id":"61de6c3d-715c-4b7d-b945-aa57766abc91","name":"Split Out4"},{"parameters":{"mode":"combine","advanced":true,"mergeByFields":{"values":[{"field1":"['data.data.tournaments.nodes'].events[0].tournament.name","field2":"['[\\'data.data.tournaments.nodes\\'].events'].tournament.name"}]},"options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-3344,768],"id":"af85d183-6275-4975-8b2e-3b05aa7b5dd3","name":"Merge Events1"},{"parameters":{"assignments":{"assignments":[{"id":"8396582b-b19a-48d6-8763-3bdf55723ab3","name":"=$json['sum_\\'data_data_tournaments_nodes\\'_events0_numEntrants']","value":"={{$json['sum_\\'data_data_tournaments_nodes\\'_events0_numEntrants'] + $json['sum_\\'data_data_tournaments_nodes\\'_events1_numEntrants']}}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2480,640],"id":"5a5fc6cf-b5ac-4e26-a91f-1f4d0388e2ac","name":"Edit Fields2"},{"parameters":{"jsCode":"// Get all input items from the previous node in n8n\nconst items = $input.all();\n\n// Initialize a Set to track unique event IDs\nconst seenEventIds = new Set();\n\n// Initialize an array to store the filtered results\nconst result = [];\n\n// Iterate through all input items (assumed to be sorted beforehand)\nfor (const item of items) {\n    \n    // Extract the event ID (used for uniqueness filtering)\n    const eventId = item.json[\"data.data.event.id\"];\n\n    // If this event ID hasn't been seen before, add it to the result list\n    if (!seenEventIds.has(eventId)) {\n        seenEventIds.add(eventId); // Mark it as seen\n        result.push(item); // Store the first occurrence of this event ID\n    }\n\n    // Stop processing once we have collected 5 unique events\n    if (result.length === 5) {\n        break;  \n    }\n}\n\n// Return the filtered results containing at most 5 unique event IDs\nreturn result;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2720,1104],"id":"b3eca456-01af-47f2-a7d2-a033e0806ba5","name":"Code3"},{"parameters":{"assignments":{"assignments":[{"id":"30a8800a-7914-442c-b348-495ef081e6c8","name":"totalEntrants","value":"={{ $('Aggregate').item.json.data[0].$json['sum_\\'data_data_tournaments_nodes\\'_events0_numEntrants'] }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[512,0],"id":"dc953ddf-8a2d-4a33-8c52-6678358e6a7f","name":"Edit Fields3"},{"parameters":{"sortFieldsUi":{"sortField":[{"fieldName":"['data.data.tournaments.nodes'].events[0].numEntrants","order":"descending"}]},"options":{}},"type":"n8n-nodes-base.sort","typeVersion":1,"position":[-2720,912],"id":"9ca67c26-d122-4af7-9445-576ebe2594b7","name":"Sort"},{"parameters":{"content":"Need to adjust these. Not finding multiday events and only looking at last game for winning character. Grand finals reset does something weird too.","height":540,"width":2180},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-2864,1040],"id":"1dc77bb9-a590-419c-8ca8-97ea26330c8c","name":"Sticky Note"},{"parameters":{"method":"POST","url":"https://bsky.social/xrpc/com.atproto.server.createSession","sendBody":true,"bodyParameters":{"parameters":[{"name":"identifier","value":"={{ $json.BlueskyHandle }}"},{"name":"password","value":"={{ $json.BlueskyAppPassword }}"}]},"options":{}},"id":"f032e2e3-6b22-4d12-83ad-60740badbd8f","name":"Create Bluesky Session","type":"n8n-nodes-base.httpRequest","position":[1728,672],"typeVersion":4.2},{"parameters":{"assignments":{"assignments":[{"id":"ec07f538-0164-40c5-a199-45e2a8a4604a","name":"BlueskyHandle","type":"string","value":"rivals2statbot.bsky.social"},{"id":"463e906c-c49b-41e0-9176-04bd2c175d0b","name":"BlueskyAppPassword","type":"string","value":"#m;:vBeyRiWE83K"}]},"options":{}},"id":"c7ad40d4-3a6f-4792-a579-782c0cb7aa7d","name":"Set Bluesky Credentials","type":"n8n-nodes-base.set","position":[1504,672],"typeVersion":3.4},{"parameters":{"method":"POST","url":"https://bsky.social/xrpc/com.atproto.repo.createRecord","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('Create Bluesky Session').item.json.accessJwt}}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $('Create Post Text').item.json.toJsonString() }}","options":{}},"id":"03b901a6-c0dc-4728-b86e-76ebea0d1fef","name":"Create Initial Post","type":"n8n-nodes-base.httpRequest","position":[1728,912],"typeVersion":4.2},{"parameters":{"mode":"runOnceForEachItem","jsCode":"// Create the initial post text\nconst postText = $('Aggregate2').item.json.data[0].result;\n;\n\n// Create the parent post object\nconst postData = {\n    repo: $('Set Bluesky Credentials').first().json.BlueskyHandle,\n    collection: \"app.bsky.feed.post\",\n    record: {\n        $type: \"app.bsky.feed.post\",\n        text: postText,\n        createdAt: $now\n    }\n};\n\nreturn postData;"},"id":"e597a5b6-9d11-4064-aaf0-4749f5f4acf1","name":"Create Post Text","type":"n8n-nodes-base.code","position":[1504,912],"typeVersion":2},{"parameters":{"method":"POST","url":"https://bsky.social/xrpc/com.atproto.repo.createRecord","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('Create Bluesky Session').item.json.accessJwt}}"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $('Create Reply Text1').item.json.toJsonString() }} ","options":{}},"id":"f5f12753-9414-42fe-99fe-0a7ebc8e449e","name":"Create Reply1","type":"n8n-nodes-base.httpRequest","position":[1728,1152],"typeVersion":4.2},{"parameters":{"jsCode":"// Create the reply text\nconst replyText = $('Aggregate2').first().json.data[1].result;\n\n// Calculate timestamp 1 second from now\nconst futureDate = new Date(Date.now() + 1000);\n\n// Create the reply post object\nconst replyPostData = {\n    repo: $('Set Bluesky Credentials').first().json.BlueskyHandle,\n    collection: \"app.bsky.feed.post\",\n    record: {\n        \"$type\": \"app.bsky.feed.post\",\n        text: replyText,\n        reply: {\n            root: {\n                cid: $('Create Initial Post').first().json.cid,\n                uri: $('Create Initial Post').first().json.uri\n            },\n            parent: {\n                cid: $('Create Initial Post').first().json.cid,\n                uri: $('Create Initial Post').first().json.uri\n            }\n        },\n        createdAt: futureDate.toISOString()\n    }\n};\n\nreturn replyPostData;"},"id":"4073e27c-83c1-4a86-9343-5e1ebc5b0af6","name":"Create Reply Text1","type":"n8n-nodes-base.code","position":[1504,1152],"typeVersion":2},{"parameters":{"maxItems":3},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[688,560],"id":"3ed1df4f-ff6a-487c-b06e-6054388eaa3e","name":"Limit1"},{"parameters":{"maxItems":2,"keep":"lastItems"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[688,800],"id":"13c0da90-71fa-4070-abcd-b83701991115","name":"Limit2"},{"parameters":{"jsCode":"// Define key phrases that should be kept and hashtagged\nconst hashtagKeywords = {\n};\n\n// Function to apply hashtags to specific keywords\nconst addHashtags = (name) => {\n    let updatedName = name;\n    Object.keys(hashtagKeywords).forEach((word) => {\n        const regex = new RegExp(`(?<!\\\\w)${word}(?!\\\\w)`, \"gi\");\n        updatedName = updatedName.replace(regex, hashtagKeywords[word]);\n    });\n    return updatedName;\n};\n\n// Retrieve input string\nconst inputString = \"Yesterday in #Rivals2!\";\n\n// Get tournament data from previous node\nconst tournaments = $input.all();\n\n// Ensure valid input\nif (!Array.isArray(tournaments) || tournaments.length === 0) {\n    return [{ result: \"Error: No tournament data received.\", characterCount: 0 }];\n}\n\n// Format the tournament list using the cleaned tournament names and winners from the previous script\nlet tournamentList = \"\\n\\n\";\ntournaments.forEach((tournament) => {\n    let name = tournament.json?.name || \"Unknown Tournament\";\n    let winner = tournament.json?.winner || \"   No Winner\";\n    let entrants = tournament.json?.entrants || 0;\n    let location = tournament.json?.location? ` ${tournament.json?.location}` : \"\";\n\n    // Apply hashtagging to tournament names and winner names\n    name = addHashtags(name);\n    winner = addHashtags(winner);\n\n    tournamentList += `${name}${location} - ${entrants} entrants\\n${winner}\\n`;\n});\n\n// Construct the final message\nconst finalString = `${inputString}${tournamentList}\\n`;\n\n// Count the number of characters\nconst characterCount = finalString.length;\n\n// Return the result\nreturn [{ \n    result: finalString, \n    characterCount: characterCount \n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[848,560],"id":"2699badd-0c5a-43b1-89a0-611f873da162","name":"Code (Final Attempt)1"},{"parameters":{"jsCode":"// Define key phrases that should be kept and hashtagged\nconst hashtagKeywords = {\n};\n\n// Function to apply hashtags to specific keywords\nconst addHashtags = (name) => {\n    let updatedName = name;\n    Object.keys(hashtagKeywords).forEach((word) => {\n        const regex = new RegExp(`(?<!\\\\w)${word}(?!\\\\w)`, \"gi\");\n        updatedName = updatedName.replace(regex, hashtagKeywords[word]);\n    });\n    return updatedName;\n};\n\n// Retrieve total entrants\nconst totalEntrants = $('Edit Fields3').first().json.totalEntrants || 0;\n\n// Get tournament data from previous node\nconst tournaments = $input.all();\n\n// Ensure valid input\nif (!Array.isArray(tournaments) || tournaments.length === 0) {\n    return [{ result: \"Error: No tournament data received.\", characterCount: 0 }];\n}\n\n// Format the tournament list using the cleaned tournament names and winners from the previous script\nlet tournamentList = \"\";\ntournaments.forEach((tournament) => {\n    let name = tournament.json?.name || \"Unknown Tournament\";\n    let winner = tournament.json?.winner || \"   No Winner\";\n    let entrants = tournament.json?.entrants || 0;\n    let location = tournament.json?.location? ` ${tournament.json?.location}` : \"\";\n\n    // Apply hashtagging to tournament names and winner names\n    name = addHashtags(name);\n    winner = addHashtags(winner);\n\n    tournamentList += `${name}${location} - ${entrants} entrants\\n${winner}\\n`;\n});\n\n// Construct the final message\nconst finalString = `${tournamentList}`;\n\n// This line is a comment and won't affect the output\n// \\nEntrants yesterday: ${totalEntrants}`.trim();\n\n// Count the number of characters\nconst characterCount = finalString.length;\n\n// Return the result\nreturn [{ \n    result: finalString, \n    characterCount: characterCount \n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[848,800],"id":"787826d2-642b-4500-b462-2c8d695f66c1","name":"Code (Final Attempt)2"},{"parameters":{"jsCode":"// Define key phrases that should be kept and hashtagged\nconst hashtagKeywords = {\n    \"Rivals2\": \"#Rivals2\",\n    \"Rivals of Aether\": \"#RivalsOfAether\",\n    \"Melee\": \"#Melee\",\n    \"Rivals\": \"#Rivals\",\n    \"Smash Ultimate\": \"#SmashUltimate\"\n};\n\n// Function to apply hashtags to specific keywords in a string,\n// but only if they are not already hashtagged.\nconst addHashtags = (name) => {\n    let updatedName = name;\n    Object.keys(hashtagKeywords).forEach((word) => {\n        // Only replace if not already preceded by a '#'\n        const regex = new RegExp(`(?<![#\\\\w])${word}(?!\\\\w)`, \"gi\");\n        updatedName = updatedName.replace(regex, hashtagKeywords[word]);\n    });\n    return updatedName;\n};\n\n// Function to clean winner names by removing sponsor prefixes\n//const cleanWinnerName = (winner) => {\n    //if (!winner) return \"\";\n    // Remove sponsor prefix if it exists (formatted as \"Sponsor | Winner\")\n    //return winner.includes(\"|\") ? winner.split(\"|\").pop().trim() : winner.trim();\n//};\n\n// Define mapping of character names to icons\nconst characterIcons = {\n    \"Forsburn\": \"☠️\",\n    \"Loxodont\": \"🐘\",\n    \"Clairen\": \"🤺\",\n    \"Zetterburn\": \"🦁\",\n    \"Wrastor\": \"🦅\",\n    \"Fleet\": \"🦊\",\n    \"Maypul\": \"🌱\",\n    \"Kragg\": \"🪲\",\n    \"Ranno\": \"🐸\",\n    \"Orcane\": \"🐋\",\n    \"Etalus\": \"🐻‍\",\n    \"Olympia\": \"💎\"\n};\n\n// Retrieve tournament data\nconst tournamentData = Array.from({ length: 5 }, (_, i) => {\n    const tournamentNode = $('Aggregate').first().json.data[i]?.['data.data.tournaments.nodes'] || {};\n    const rawWinnerName = $('Aggregate').first().json.data[i]?.winnerName || \"\";\n\n    // Determine location: if countryCode exists and is not \"US\", use countryCode; otherwise, use addrState.\n    const location = (tournamentNode.countryCode && tournamentNode.countryCode !== \"US\")\n        ? tournamentNode.countryCode\n        : tournamentNode.addrState;\n  \n    // Retrieve the selections from the first game (if available) for character mapping\n    const selections = $('Aggregate').first().json.data[i]?.['data.data.set.games[0].selections'];\n    // Safely check for character name\n    const characterName = selections && selections.character ? selections.character.name : \"\";\n    // If a character name exists, use its mapped icon; otherwise, default to \"W:\"\n    const icon = characterName ? (characterIcons[characterName] || \"W:\") : \"W:\";\n\n    return {\n        name: tournamentNode.name || \"N/A\",\n        entrants: tournamentNode.events?.[0]?.numEntrants || 0,\n        winner: rawWinnerName ? `   ${icon} ${rawWinnerName}` : \"\",\n        location: location ? `(${location})` : \"\"\n    };\n});\n\n// Ensure the list is always 5 items long\nwhile (tournamentData.length < 5) {\n    tournamentData.push({ name: \"N/A\", entrants: 0, winner: \"\" });\n}\n\n// Return processed tournaments\nreturn tournamentData.slice(0, 5);\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[432,688],"id":"449f9279-8257-4d70-88c9-ec46e7deab4d","name":"Code (Truncate Sponsors)1"},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[1264,672],"id":"9a4339ae-9a73-4b2a-815f-3806e6b34257","name":"Aggregate2"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[1072,672],"id":"0f4b13bf-e7f7-4a4c-8406-a6fa1d795e3a","name":"Merge2"},{"parameters":{"operation":"roundDate","date":"={{ $json.currentDate }}","toNearest":"day","options":{}},"type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-4704,880],"id":"7beecb2f-4074-4607-8c71-4f03ee5488cc","name":"Date & Time4"},{"parameters":{"postText":"={{ $json.result }}"},"type":"@muench-dev/n8n-nodes-bluesky.bluesky","typeVersion":2,"position":[288,304],"id":"66c096ec-ddde-48d7-8f0c-44fdca748dda","name":"Bluesky","credentials":{"blueskyApi":{"id":"QPGGEIIpgB13gOeW","name":"Bluesky account"}}},{"parameters":{"operation":"addToDate","magnitude":"={{ $json.roundedDate }}","timeUnit":"hours","duration":5,"options":{}},"type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-4480,800],"id":"4d161086-28a4-4034-b7a2-2d0fcd3d535f","name":"Date & Time5"}],"connections":{"Date & Time1":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Date & Time":{"main":[[{"node":"Date & Time4","type":"main","index":0}]]},"Date & Time2":{"main":[[{"node":"Date & Time3","type":"main","index":0}]]},"Date & Time3":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Merge":{"main":[[{"node":"GraphQL Events","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Split Out4","type":"main","index":0},{"node":"Merge Events1","type":"main","index":0}]]},"Filter1":{"main":[[{"node":"Summarize","type":"main","index":0},{"node":"Sort","type":"main","index":0}]]},"Summarize":{"main":[[{"node":"Edit Fields2","type":"main","index":0}]]},"Limit":{"main":[[{"node":"GraphQL Phases","type":"main","index":0},{"node":"Merge Events","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Assemble Post","type":"main","index":0}]]},"Merge1":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Run Daily @ 4:21pm":{"main":[[{"node":"Date & Time","type":"main","index":0}]]},"GraphQL Events":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"GraphQL Phases":{"main":[[{"node":"Split Out1","type":"main","index":0}]]},"Split Out1":{"main":[[{"node":"Sort1","type":"main","index":0}]]},"Sort1":{"main":[[{"node":"Code3","type":"main","index":0}]]},"Split Out2":{"main":[[{"node":"Sort2","type":"main","index":0}]]},"Sort2":{"main":[[{"node":"Code Top5 Events","type":"main","index":0}]]},"GraphQL Phases1":{"main":[[{"node":"Split Out2","type":"main","index":0}]]},"GraphQL Phases2":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Merge Winners1","type":"main","index":0}]]},"Filter":{"main":[[{"node":"GraphQL Phases2","type":"main","index":0},{"node":"GraphQL Phases3","type":"main","index":0}]]},"Merge Events":{"main":[[{"node":"Merge Events and Winners","type":"main","index":0}]]},"Merge Events and Winners":{"main":[[{"node":"Merge1","type":"main","index":1}]]},"Merge Winners":{"main":[[{"node":"Merge Events and Winners","type":"main","index":1}]]},"Code Top5 Events":{"main":[[{"node":"Filter","type":"main","index":0},{"node":"Merge Events","type":"main","index":1},{"node":"Merge Winners","type":"main","index":0}]]},"If 280 > x > 300":{"main":[[{"node":"Bluesky","type":"main","index":0}],[{"node":"Code (Truncate Sponsors)1","type":"main","index":0}]]},"Assemble Post":{"main":[[{"node":"Edit Fields3","type":"main","index":0}]]},"GraphQL Phases3":{"main":[[{"node":"Split Out3","type":"main","index":0}]]},"Merge Winners1":{"main":[[{"node":"Merge Winners","type":"main","index":1}]]},"Split Out3":{"main":[[{"node":"Filter2","type":"main","index":0}]]},"Filter2":{"main":[[{"node":"Merge Winners1","type":"main","index":1}]]},"Split Out4":{"main":[[{"node":"Merge Events1","type":"main","index":1}]]},"Merge Events1":{"main":[[{"node":"Filter1","type":"main","index":0}]]},"Edit Fields2":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"Code3":{"main":[[{"node":"GraphQL Phases1","type":"main","index":0}]]},"Edit Fields3":{"main":[[{"node":"If 280 > x > 300","type":"main","index":0}]]},"Sort":{"main":[[{"node":"Limit","type":"main","index":0}]]},"Create Bluesky Session":{"main":[[{"node":"Create Post Text","type":"main","index":0}]]},"Set Bluesky Credentials":{"main":[[{"node":"Create Bluesky Session","type":"main","index":0}]]},"Create Initial Post":{"main":[[{"node":"Create Reply Text1","type":"main","index":0}]]},"Create Post Text":{"main":[[{"node":"Create Initial Post","type":"main","index":0}]]},"Create Reply Text1":{"main":[[{"node":"Create Reply1","type":"main","index":0}]]},"Limit1":{"main":[[{"node":"Code (Final Attempt)1","type":"main","index":0}]]},"Limit2":{"main":[[{"node":"Code (Final Attempt)2","type":"main","index":0}]]},"Code (Final Attempt)1":{"main":[[{"node":"Merge2","type":"main","index":0}]]},"Code (Final Attempt)2":{"main":[[{"node":"Merge2","type":"main","index":1}]]},"Code (Truncate Sponsors)1":{"main":[[{"node":"Limit1","type":"main","index":0},{"node":"Limit2","type":"main","index":0}]]},"Aggregate2":{"main":[[{"node":"Set Bluesky Credentials","type":"main","index":0}]]},"Merge2":{"main":[[{"node":"Aggregate2","type":"main","index":0}]]},"Date & Time4":{"main":[[{"node":"Date & Time2","type":"main","index":0},{"node":"Date & Time5","type":"main","index":0}]]},"Date & Time5":{"main":[[{"node":"Date & Time1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Run Daily @ 4:21pm":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"8a659882-8ebc-40a5-ab77-52f20ac35821","triggerCount":1,"shared":[{"createdAt":"2025-10-19T02:04:51.591Z","updatedAt":"2025-10-19T02:04:51.591Z","role":"workflow:owner","workflowId":"126BMZCcmw0LobJ0","projectId":"u9kYCfFU7pgjjx9U"}],"tags":[{"createdAt":"2025-10-19T02:01:25.366Z","updatedAt":"2025-10-19T02:01:25.366Z","id":"WjYjrAQMMnwIYj0J","name":"Active"}]}